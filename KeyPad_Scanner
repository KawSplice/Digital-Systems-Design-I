//-----------------------------------------------------------------------------    
//   University: Oregon Institute of Technology â€“ CSET Department
//   Class: CST 231
//   Author: Luis Solis
//   Lab:  Lab4
//   Project: digital door lock system
//   File Name: Key_Pad_Scanner
//   List of other files used: Clock_Divider.v  Key_Pad_Scanner.v, my7Seg.V 
//										 reset_15.v, Sequence_Builder.v, Sequence_Checker.v 
//-----------------------------------------------------------------------------    
//   Description of the Code (1 - 5 lines)
// 	Lab Description: Key_Pad_Scanner will input a column and then will display 
//						
//-----------------------------------------------------------------------------    
//   Date: 01/04/2022
//   Version: 1.0
//   Revision: 02/4-22/2022
//					
//-----------------------------------------------------------------------------
module Key_Pad_Scanner (
	input  clk, 
	input [3:0] columns, //what column 0-3
	output reg [3:0] rows,	  //what row r1-r3
	output reg [3:0] digit,	  //key 
	output reg key_pressed 	  //key_pressed 
);
	                             
reg [1:0] count;
initial rows = 4'b0111;
initial key_pressed = 0;
// Always block to handle the count
always @(posedge clk)
		begin 
			count <=count + 1;
		end
// Always block to handle the case portion	
always @ (posedge clk)
	begin 
		case(count) 
			2'b00:
				begin 
				rows <= 4'b1011;	
					case(columns)
						4'b0111 :
						begin 
							digit <= 4'b0001; //1
							key_pressed <= 1'b1;
						end
						4'b1011 : 
						begin 
							digit <= 4'b0010; //2
							key_pressed <= 1'b1;
						end
						4'b1101 : 
						begin 
							digit <= 4'b0011; //3
							key_pressed <= 1'b1;
						end
						4'b1110 : 
						begin
							digit <= 4'b1010; //A
							key_pressed <= 1'b1;
						end
						default :
							begin
								digit <= 4'b0000;
								key_pressed <= 1'b0;
							end
					endcase 
					
				end 
			2'b01:
				begin 
				rows <= 4'b1101;	
					case(columns)
						 
						4'b0111 : 
						begin
							digit <= 4'b0100; //4
							key_pressed <= 1'b1;
						end 
						4'b1011 : 
						begin 
							digit <= 4'b0101; //5
							key_pressed <= 1'b1;
						end
						4'b1101 : 
						begin 
							digit <= 4'b0110; //6
							key_pressed <= 1'b1;
						end
						4'b1110 : 
						begin
							digit <= 4'b1011; //B
							key_pressed <= 1'b1;
						end
						default : 
						begin 
							digit <= 4'b0000;
							key_pressed <= 1'b0;
						end
					endcase 
				end 
			2'b10:
				begin 
				rows <= 4'b1110;	
					case(columns) 
						4'b0111 : 
						begin
							digit <= 4'b0111; //7
							key_pressed <= 1'b1;
						end
						4'b1011 : 
						begin
							digit <= 4'b1000; //8
							key_pressed <= 1'b1;
						end
						4'b1101 : 
						begin
							digit <= 4'b1001; //9
							key_pressed <= 1'b1;
						end
						4'b1110 : 
						begin
							digit <= 4'b1100; //C
							key_pressed <= 1'b1;
						end
						default : 
						begin 
							digit <= 4'b0000;
							key_pressed <= 1'b0;
						end
					endcase 
				end 
			2'b11:
				begin 
				rows <= 4'b0111;	
					case(columns)
						4'b0111 : 
						begin
							digit <= 4'b1110; //E/*
							key_pressed <= 1'b1;
						end
						4'b1011 : 
						begin 
							digit <= 4'b0000; //0
							key_pressed <= 1'b1;
						end
						4'b1101 : 
						begin
							digit <= 4'b1111; //F/#
							key_pressed <= 1'b1;
						end
						4'b1110 : 
						begin
							digit <= 4'b1101; //D
							key_pressed <= 1'b1;
						end
						default : 
						begin 
							digit <= 4'b0000;
							key_pressed <= 1'b0;
						end
					endcase 
				end
			default :
			begin 
						key_pressed <= 1'b0;			
						digit <= 4'b0000;
			end		
		endcase	
	end
endmodule 
